//User Model 
const mongoose = require('mongoose');
const bcrypt = require('bcrypt');
const saltRounds = 10;
const jwt = require('jsonwebtoken');
const moment = require('moment'); // use to manage dates 

//create schema with mongoose schema Creater - mongoose.Schema
const userSchema = mongoose.Schema({
    name: {
        type: String,
        maxlength: 50
    },
    email: {
        type: String,
        trim: true,
        unique: 1
    },
    password: {
        type: String,
        minglength: 5
    },
    lastname: {
        type: String,
        maxlength: 50
    },
    //role to differentiate normal user and admin
    role: {
        type: Number,
        default: 0 // meas normal user, 1 for admin
    },
    cart: {
        type: Array,
        default: []
    },
    image: String,
    token: {
        type: String,
    },
    tokenExp: {
        type: Number
    }
})

//Hash the password using Bcrpt
//pre - means before saving
userSchema.pre('save', function (next) {
    var user = this; //this means userSchema

    //hash password wehen only password is modified
    if (user.isModified('password')) {
        console.log('password changed')
        bcrypt.genSalt(saltRounds, function (err, salt) {
            if (err) return next(err);

            //if there is no error in generating salt, then hash the pasword
            //and the callback fuctions parameters are error and the hash
            //generate hash with the salt
            bcrypt.hash(user.password, salt, function (err, hash) {
                if (err) return next(err);
                user.password = hash
                next()
            })
        })
    } else {
        next()
    }
});


//for comparing the password, cb - callback function, and this.password - means the password we have in the databasse
userSchema.methods.comparePassword = function (plainPassword, cb) {
    bcrypt.compare(plainPassword, this.password, function (err, isMatch) {
        if (err) return cb(err);
        cb(null, isMatch)
    })
}

//for generate token uing json web token to the logged in user
userSchema.methods.generateToken = function (cb) {
    var user = this;

    //make token
    var token = jwt.sign(user._id.toHexString(), 'secret') //the _id is auto generated by mongo db 
    var oneHour = moment().add(1, 'hour').valueOf();

    user.tokenExp = oneHour;
    user.token = token;

    //save the info in db
    user.save(function (err, user) {
        if (err) return cb(err)
        cb(null, user);
    })
}

userSchema.statics.findByToken = function (token, cb) {
    var user = this;

    //by decoding , get the user id
    jwt.verify(token, 'secret', function (err, decode) {
        user.findOne({ "_id": decode, "token": token }, function (err, user) {
            if (err) return cb(err);
            cb(null, user); // send this callback to users.js route
        })
    })
}

//create model by using the schema
const User = mongoose.model('User', userSchema);

module.exports = { User }