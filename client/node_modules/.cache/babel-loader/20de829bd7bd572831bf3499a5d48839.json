{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\User\\\\Desktop\\\\AF_Project_ShoppingCart\\\\ShoppingCart\\\\client\\\\src\\\\components\\\\views\\\\LoginPage\\\\LoginPage.js\";\n//Component for Login Page\nimport { Formik } from 'formik';\nimport * as Yup from 'yup';\nimport { Form, Icon, Input, Button, Checkbox, Typography } from 'antd';\nimport { useDispatch } from \"react-redux\";\nimport React, { useState } from \"react\";\nimport { withRouter } from \"react-router-dom\";\nimport { loginUser } from \"../../../_actions/user_actions\"; //import AdminPage from './views/AdminPage/AdminPage';\n\nconst {\n  Title\n} = Typography;\n\nfunction LoginPage(props) {\n  const dispatch = useDispatch();\n  const [formErrorMessage, setFormErrorMessage] = useState('');\n  return /*#__PURE__*/React.createElement(Formik, {\n    initialValues: {\n      email: '',\n      password: ''\n    },\n    validationSchema: Yup.object().shape({\n      email: Yup.string().email('Email Id is invalid').required('Email Id is required'),\n      password: Yup.string().min(6, 'Password must have at least 6 characters').required('Password is required')\n    }),\n    onSubmit: (values, {\n      setSubmitting\n    }) => {\n      setTimeout(() => {\n        let dataToSubmit = {\n          email: values.email,\n          password: values.password\n        }; //in redux, dispatch is an action used to change the state\n\n        dispatch(loginUser(dataToSubmit)).then(response => {\n          if (response.payload.successLogin) {\n            //window.localStorage.setItem('userId', response.payload.userId);\n            //history.push. , it pushes a new entry into the history stack\n            // - means redirecting the user to home route.\n            //if its admin redirect to admin page\n            //  if (response.payload.isAdmin) {\n            if (response.payload.role === 1) {\n              props.history.push(\"/admin\");\n            } else if (response.payload.role === 2) {\n              props.history.push(\"/StoreManager\");\n            } else {\n              props.history.push(\"/\");\n            } //if fail to login\n\n          } else {\n            setFormErrorMessage('Fail to login, Check out The Email or Password again');\n          }\n        }).catch(err => {\n          setFormErrorMessage('Fail to login, Check out The Email or Password again');\n          setTimeout(() => {\n            setFormErrorMessage(\"\");\n          }, 3000);\n        });\n        setSubmitting(false);\n      }, 500);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 20,\n      columnNumber: 5\n    }\n  }, props => {\n    const {\n      values,\n      touched,\n      errors,\n      dirty,\n      isSubmitting,\n      handleChange,\n      handleBlur,\n      handleSubmit,\n      handleReset\n    } = props;\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"app\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(Title, {\n      level: 2,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 13\n      }\n    }, \"Log In\"), /*#__PURE__*/React.createElement(\"form\", {\n      onSubmit: handleSubmit,\n      style: {\n        width: '500px'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(Form.Item, {\n      required: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 15\n      }\n    }, /*#__PURE__*/React.createElement(Input, {\n      id: \"email\",\n      prefix: /*#__PURE__*/React.createElement(Icon, {\n        type: \"user\",\n        style: {\n          color: 'rgba(0,0,0,.25)'\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 102,\n          columnNumber: 27\n        }\n      }),\n      placeholder: \"Enter  email\",\n      type: \"email\",\n      value: values.email,\n      onChange: handleChange,\n      onBlur: handleBlur,\n      className: errors.email && touched.email ? 'text-input error' : 'text-input',\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 17\n      }\n    }), errors.email && touched.email && /*#__PURE__*/React.createElement(\"div\", {\n      className: \"input-feedback\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 113,\n        columnNumber: 19\n      }\n    }, errors.email)), /*#__PURE__*/React.createElement(Form.Item, {\n      required: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 117,\n        columnNumber: 15\n      }\n    }, /*#__PURE__*/React.createElement(Input, {\n      id: \"password\",\n      prefix: /*#__PURE__*/React.createElement(Icon, {\n        type: \"lock\",\n        style: {\n          color: 'rgba(0,0,0,.25)'\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 120,\n          columnNumber: 27\n        }\n      }),\n      placeholder: \"Enter Password\",\n      type: \"password\",\n      value: values.password,\n      onChange: handleChange,\n      onBlur: handleBlur,\n      className: errors.password && touched.password ? 'text-input error' : 'text-input',\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 118,\n        columnNumber: 17\n      }\n    }), errors.password && touched.password && /*#__PURE__*/React.createElement(\"div\", {\n      className: \"input-feedback\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 131,\n        columnNumber: 19\n      }\n    }, errors.password)), formErrorMessage && /*#__PURE__*/React.createElement(\"label\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 136,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(\"p\", {\n      style: {\n        color: '#ff0000bf',\n        fontSize: '0.7rem',\n        border: '1px solid',\n        padding: '1rem',\n        borderRadius: '10px'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 136,\n        columnNumber: 25\n      }\n    }, formErrorMessage)), /*#__PURE__*/React.createElement(Form.Item, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 139,\n        columnNumber: 15\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 141,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(Button, {\n      type: \"primary\",\n      htmlType: \"submit\",\n      className: \"login-form-button\",\n      style: {\n        minWidth: '100%'\n      },\n      disabled: isSubmitting,\n      onSubmit: handleSubmit,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 142,\n        columnNumber: 19\n      }\n    }, \"Log in\")), \"Or \", /*#__PURE__*/React.createElement(\"a\", {\n      href: \"/register\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 146,\n        columnNumber: 20\n      }\n    }, \"register now!\"), /*#__PURE__*/React.createElement(\"a\", {\n      className: \"login-form-forgot\",\n      href: \"/reset_user\",\n      style: {\n        float: 'right'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 147,\n        columnNumber: 17\n      }\n    }, \"Forgot Password\"))));\n  });\n}\n\n;\nexport default withRouter(LoginPage);","map":{"version":3,"sources":["C:/Users/User/Desktop/AF_Project_ShoppingCart/ShoppingCart/client/src/components/views/LoginPage/LoginPage.js"],"names":["Formik","Yup","Form","Icon","Input","Button","Checkbox","Typography","useDispatch","React","useState","withRouter","loginUser","Title","LoginPage","props","dispatch","formErrorMessage","setFormErrorMessage","email","password","object","shape","string","required","min","values","setSubmitting","setTimeout","dataToSubmit","then","response","payload","successLogin","role","history","push","catch","err","touched","errors","dirty","isSubmitting","handleChange","handleBlur","handleSubmit","handleReset","width","color","fontSize","border","padding","borderRadius","minWidth","float"],"mappings":"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","sourcesContent":["//Component for Login Page\nimport { Formik } from 'formik';\nimport * as Yup from 'yup';\nimport { Form, Icon, Input, Button, Checkbox, Typography } from 'antd';\nimport { useDispatch } from \"react-redux\";\nimport React, { useState } from \"react\";\nimport { withRouter } from \"react-router-dom\";\nimport { loginUser } from \"../../../_actions/user_actions\";\n//import AdminPage from './views/AdminPage/AdminPage';\n\n\nconst { Title } = Typography;\n\nfunction LoginPage(props) {\n  \n  const dispatch = useDispatch();\n  const [formErrorMessage, setFormErrorMessage] = useState('')\n\n  return (\n    <Formik\n      initialValues={{\n        email: '',\n        password: '',\n      }}\n\n      validationSchema={Yup.object().shape({\n        email: Yup.string()\n          .email('Email Id is invalid')\n          .required('Email Id is required'),\n\n        password: Yup.string()\n          .min(6, 'Password must have at least 6 characters')\n          .required('Password is required'),\n\n      })}\n\n      onSubmit={(values, { setSubmitting }) => {\n        setTimeout(() => {\n          let dataToSubmit = {\n            email: values.email,\n            password: values.password\n          };\n\n          //in redux, dispatch is an action used to change the state\n          dispatch(loginUser(dataToSubmit))\n            .then(response => {\n              if (response.payload.successLogin) {\n                //window.localStorage.setItem('userId', response.payload.userId);\n                //history.push. , it pushes a new entry into the history stack\n                // - means redirecting the user to home route.\n                //if its admin redirect to admin page\n              //  if (response.payload.isAdmin) {\n                if (response.payload.role === 1) {\n                  props.history.push(\"/admin\");\n              } \n              else if (response.payload.role === 2) {\n                props.history.push(\"/StoreManager\");\n              }\n              else{\n                props.history.push(\"/\");\n              }\n              \n              //if fail to login\n             } else {\n                setFormErrorMessage('Fail to login, Check out The Email or Password again')\n              }\n            })\n            .catch(err => {\n              setFormErrorMessage('Fail to login, Check out The Email or Password again')\n              setTimeout(() => {\n                setFormErrorMessage(\"\")\n              }, 3000);\n            });\n          setSubmitting(false);\n        }, 500);\n      }}\n    >\n      {props => {\n        const {\n          values,\n          touched,\n          errors,\n          dirty,\n          isSubmitting,\n          handleChange,\n          handleBlur,\n          handleSubmit,\n          handleReset,\n        } = props;\n\n\n        return (\n          \n          <div className=\"app\">\n\n            <Title level={2}>Log In</Title>\n            <form onSubmit={handleSubmit} style={{ width: '500px' }}>\n\n              <Form.Item required>\n                <Input\n                  id=\"email\"\n                  prefix={<Icon type=\"user\" style={{ color: 'rgba(0,0,0,.25)' }} />}\n                  placeholder=\"Enter  email\"\n                  type=\"email\"\n                  value={values.email}\n                  onChange={handleChange}\n                  onBlur={handleBlur}\n                  className={\n                    errors.email && touched.email ? 'text-input error' : 'text-input'\n                  }\n                />\n                {errors.email && touched.email && (\n                  <div className=\"input-feedback\">{errors.email}</div>\n                )}\n              </Form.Item>\n\n              <Form.Item required>\n                <Input\n                  id=\"password\"\n                  prefix={<Icon type=\"lock\" style={{ color: 'rgba(0,0,0,.25)' }} />}\n                  placeholder=\"Enter Password\"\n                  type=\"password\"\n                  value={values.password}\n                  onChange={handleChange}\n                  onBlur={handleBlur}\n                  className={\n                    errors.password && touched.password ? 'text-input error' : 'text-input'\n                  }\n                />\n                {errors.password && touched.password && (\n                  <div className=\"input-feedback\">{errors.password}</div>\n                )}\n              </Form.Item>\n\n              {formErrorMessage && (\n                <label ><p style={{ color: '#ff0000bf', fontSize: '0.7rem', border: '1px solid', padding: '1rem', borderRadius: '10px' }}>{formErrorMessage}</p></label>\n              )}\n\n              <Form.Item>\n                \n                <div>\n                  <Button type=\"primary\" htmlType=\"submit\" className=\"login-form-button\" style={{ minWidth: '100%' }} disabled={isSubmitting} onSubmit={handleSubmit}>\n                    Log in\n                </Button>\n                </div>\n                Or <a href=\"/register\">register now!</a>\n                <a className=\"login-form-forgot\" href=\"/reset_user\" style={{ float: 'right' }}>\n                  Forgot Password\n                  </a>\n              </Form.Item>\n            </form>\n          </div>\n        );\n      }}\n    </Formik>\n  );\n};\n\nexport default withRouter(LoginPage);\n\n\n"]},"metadata":{},"sourceType":"module"}